const { formidable } = require('formidable');
const cloudinary = require('cloudinary').v2;
const designModel = require('../models/designModel');
const userImageModel = require('../models/userImageModel');

// imports the ObjectId constructor from the MongoDB package provided by Mongoose. ObjectId is a unique identifier generated by MongoDB for each document stored in a collection.
const {
	mongo: { ObjectId },
} = require('mongoose');

class designController {
	//this function handles the process of parsing form data, uploading an image file, creatinng new design in the database, and returning the created design document as a response.
	create_user_design = async (req, res) => {
		//Initializes the formidable middleware to parse form data from the request.
		const form = formidable({});
		const { _id } = req.userInfo;
		try {
			//configuring cloudinary
			cloudinary.config({
				cloud_name: process.env.cloud_name,
				api_key: process.env.api_key,
				api_secret: process.env.api_secret,
			});
			//Parses the form data from the request into two objects
			const [fields, files] = await form.parse(req);
			const { image } = files;
			//Uploads the image file to Cloudinary using the cloudinary.uploader.upload() method.
			const { url } = await cloudinary.uploader.upload(image[0].filepath);

			//creating a new design in the database
			const design = await designModel.create({
				user_id: _id,
				components: [JSON.parse(fields.design[0])],
				image_url: url,
			});
			return res.status(200).json({ design });
		} catch (error) {
			console.log(error);
			return res.status(500).json({ message: error.message });
		}
	};

	// function handles the process of updating a user's design, including handling file uploads to Cloudinary, updating the database document, and returning appropriate responses based on the outcome of the update operation.
	update_user_design = async (req, res) => {
		//initializes the formidable middleware to parse form data from the request
		const form = formidable({});
		const { design_id } = req.params;
		//configuring cloudinary
		try {
			cloudinary.config({
				cloud_name: process.env.cloud_name,
				api_key: process.env.api_key,
				api_secret: process.env.api_secret,
			});
			//parsing form data and extracting image and components
			//Using form.parse(req), it parses the form data from the request into two objects: fields and files. fields contain the non-file fields, and files contain the uploaded files.
			const [fields, files] = await form.parse(req);
			const { image } = files;
			const components = JSON.parse(fields.design[0]).design;
			//fetches the existing design
			const old_design = await designModel.findById(design_id);

			if (old_design) {
				//checks if the design has an existing image URL. If it does, it deletes the old image from Cloudinary using its public ID. Then, it uploads the new image to Cloudinary and retrieves its URL.
				if (old_design.image_url) {
					const splitImage = old_design.image_url.split('/');
					const imageFile = splitImage[splitImage.length - 1];
					const imageName = imageFile.split('.')[0];
					await cloudinary.uploader.destroy(imageName);
				}

				const { url } = await cloudinary.uploader.upload(
					image[0].filepath
				);

				await designModel.findByIdAndUpdate(design_id, {
					image_url: url,
					components,
				});

				return res
					.status(200)
					.json({ message: 'Image has been saved successfully!' });
			} else {
				return res.status(404).json({ message: 'Design not found!' });
			}
		} catch (error) {
			return res.status(500).json({ message: error.message });
		}
	};

	// function provides an endpoint for retrieving a specific user design from the database based on the provided design_id.
	get_user_design = async (req, res) => {
		const { design_id } = req.params;

		try {
			const design = await designModel.findById(design_id);
			return res.status(200).json({ design: design.components });
		} catch (error) {
			return res.status(500).json({ message: error.message });
		}
	};

	//function handles the process of adding an image uploaded by a user to the system by uploading it to Cloudinary and creating a corresponding database record to store the image information.
	add_user_image = async (req, res) => {
		// Extract the user ID from the request's userInfo object
		const { _id } = req.userInfo;
		// Initialize formidable to parse the incoming form data
		const form = formidable({});
		//configuring cloudinary
		cloudinary.config({
			cloud_name: process.env.cloud_name,
			api_key: process.env.api_key,
			api_secret: process.env.api_secret,
		});

		try {
			// Parse the incoming form data. Using form.parse(req), it parses the incoming form data into two objects: fields and files.
			const [_, files] = await form.parse(req);
			const { image } = files;
			// Upload the image to Cloudinary and retrieve the URL
			const { url } = await cloudinary.uploader.upload(image[0].filepath);
			// Create a new user image record in the database
			const userImage = await userImageModel.create({
				user_id: _id,
				image_url: url,
			});
			return res.status(201).json({ userImage });
		} catch (error) {
			return res.status(500).json({ message: error.message });
		}
	};

	// this function retrieves images associated with a specific user from the database and returns them as a JSON response.
	get_user_image = async (req, res) => {
		// Extract the user ID from the request's userInfo object
		const { _id } = req.userInfo;
		try {
			const images = await userImageModel.find({
				user_id: new ObjectId(_id),
			});
			return res.status(200).json({ images });
		} catch (error) {
			return res.status(500).json({ message: error.message });
		}
	};

	//this function retrieves designs associated with a specific user ID from the database based on the user's JWT token.
	get_user_designs = async (req, res) => {
		//console.log(req);
		const { _id } = req.userInfo;

		try {
			const designs = await designModel
				//new ObjectId(_id) is used to convert the _id string into a MongoDB ObjectId,
				.find({ user_id: new ObjectId(_id) })
				.sort({ createdAt: -1 });
			return res.status(200).json({ designs });
		} catch (error) {
			return res.status(500).json({ message: error.message });
		}
	};

	// function deletes a design document from the database based on the provided design ID.
	delete_user_image = async (req, res) => {
		const { design_id } = req.params;

		try {
			await designModel.findByIdAndDelete(design_id);
			return res
				.status(200)
				.json({ message: 'Design has been deleted successfully!' });
		} catch (error) {
			return res.status(500).json({ message: error.message });
		}
	};
}

module.exports = new designController();
